#!/usr/bin/env python3

import os
import sys
from os import path
from datetime import datetime


LINKS = {
    'alacritty.yml': '~/.config/alacritty/alacritty.yml',
    'emacs-daemon.service': '~/.config/systemd/user/emacs.service',
    'emacs-config.el': '~/.doom.d/config.el',
    'emacs-init.el': '~/.doom.d/init.el',
    'gitconfig': '~/.gitconfig',
    'zshrc': '~/.zshrc',
}

LINUX_LINKS = {
    'vscode-settings-linux.json': '~/.config/Code - OSS/User/settings.json',
    'qtile-config.py': '~/.config/qtile/config.py',
    'leftwm': '~/.config/leftwm',
}

CFG_DIR = path.dirname(path.abspath(__file__))


def main():
    for src, dest in LINKS.items():
        symlink(src, dest)

    if sys.platform == 'linux':
        for src, dest in LINUX_LINKS.items():
            symlink(src, dest)


def symlink(src, dest):
    # Resolve the full path to the source file
    src = relative(src)
    # Resolve tilda (~) to the user's home directory
    dest = path.expanduser(dest)
    if path.islink(dest):
        print(f'Unlinking {dest}')
        os.remove(dest)
    if path.exists(dest):
        backup(dest)
    else:
        if make_dir_if_absent(dest):
            print(f'Making directory {path.dirname(dest)}')
    print(f'Symlinking {src} -> {dest}')
    os.symlink(src, dest)


def make_dir_if_absent(filepath):
    parent = path.dirname(filepath)
    if path.exists(parent):
        return False
    make_dir_if_absent(parent)
    os.mkdir(parent)
    return True


def relative(filepath):
    return f'{CFG_DIR}/{filepath}'


def backup(path):
    backup_name = f'{path}.backup-{datetime.now().strftime("%Y-%M-%d-%H-%M-%S")}'
    print(f'Backing up {path} -> {backup_name}')
    os.rename(path, backup_name)


if __name__ == '__main__':
    main()

